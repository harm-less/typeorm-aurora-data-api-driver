{"version":3,"file":"typeorm-aurora-data-api-driver.umd.js","sources":["../node_modules/sqlstring/lib/SqlString.js","../node_modules/sqlstring/index.js","../node_modules/data-api-client/index.js","../src/query-transformer/query-transformer.ts","../src/query-transformer/mysql-query-transformer.ts","../node_modules/uuid/dist/esm-node/regex.js","../node_modules/uuid/dist/esm-node/validate.js","../node_modules/uuid/dist/esm-node/stringify.js","../src/query-transformer/postgres-query-transformer.ts","../src/typeorm-aurora-data-api-driver.ts"],"sourcesContent":["var SqlString  = exports;\n\nvar ID_GLOBAL_REGEXP    = /`/g;\nvar QUAL_GLOBAL_REGEXP  = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP    = {\n  '\\0'   : '\\\\0',\n  '\\b'   : '\\\\b',\n  '\\t'   : '\\\\t',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\x1a' : '\\\\Z',\n  '\"'    : '\\\\\"',\n  '\\''   : '\\\\\\'',\n  '\\\\'   : '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val + '';\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n    default: return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!Array.isArray(values)) {\n    values = [values];\n  }\n\n  var chunkIndex        = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result            = '';\n  var valuesIndex       = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2\n      ? SqlString.escapeId(values[valuesIndex])\n      : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year        = dt.getFullYear();\n    month       = dt.getMonth() + 1;\n    day         = dt.getDate();\n    hour        = dt.getHours();\n    minute      = dt.getMinutes();\n    second      = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + (tz * 60000));\n    }\n\n    year       = dt.getUTCFullYear();\n    month       = dt.getUTCMonth() + 1;\n    day         = dt.getUTCDate();\n    hour        = dt.getUTCHours();\n    minute      = dt.getUTCMinutes();\n    second      = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n    zeroPad(millisecond, 3);\n\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() { return sql; }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n  }\n  return false;\n}\n","module.exports = require('./lib/SqlString');\n","\"use strict\";\n\n/*\n * This module provides a simplified interface into the Aurora Serverless\n * Data API by abstracting away the notion of field values.\n *\n * More detail regarding the Aurora Serverless Data APIcan be found here:\n * https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\n *\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @version 1.1.0\n * @license MIT\n */\n\n// Require the aws-sdk. This is a dev dependency, so if being used\n// outside of a Lambda execution environment, it must be manually installed.\nconst AWS = require(\"aws-sdk\");\n\n// Require sqlstring to add additional escaping capabilities\nconst sqlString = require(\"sqlstring\");\n\n// Supported value types in the Data API\nconst supportedTypes = [\n  \"arrayValue\",\n  \"blobValue\",\n  \"booleanValue\",\n  \"doubleValue\",\n  \"isNull\",\n  \"longValue\",\n  \"stringValue\",\n  \"structValue\",\n];\n\n/********************************************************************/\n/**  PRIVATE METHODS                                               **/\n/********************************************************************/\n\n// Simple error function\nconst error = (...err) => {\n  throw Error(...err);\n};\n\n// Parse SQL statement from provided arguments\nconst parseSQL = (args) =>\n  typeof args[0] === \"string\"\n    ? args[0]\n    : typeof args[0] === \"object\" && typeof args[0].sql === \"string\"\n    ? args[0].sql\n    : error(\"No 'sql' statement provided.\");\n\n// Parse the parameters from provided arguments\nconst parseParams = (args) =>\n  Array.isArray(args[0].parameters)\n    ? args[0].parameters\n    : typeof args[0].parameters === \"object\"\n    ? [args[0].parameters]\n    : Array.isArray(args[1])\n    ? args[1]\n    : typeof args[1] === \"object\"\n    ? [args[1]]\n    : args[0].parameters\n    ? error(\"'parameters' must be an object or array\")\n    : args[1]\n    ? error(\"Parameters must be an object or array\")\n    : [];\n\n// Parse the supplied database, or default to config\nconst parseDatabase = (config, args) =>\n  config.transactionId\n    ? config.database\n    : typeof args[0].database === \"string\"\n    ? args[0].database\n    : args[0].database\n    ? error(\"'database' must be a string.\")\n    : config.database\n    ? config.database\n    : undefined; // removed for #47 - error('No \\'database\\' provided.')\n\n// Parse the supplied hydrateColumnNames command, or default to config\nconst parseHydrate = (config, args) =>\n  typeof args[0].hydrateColumnNames === \"boolean\"\n    ? args[0].hydrateColumnNames\n    : args[0].hydrateColumnNames\n    ? error(\"'hydrateColumnNames' must be a boolean.\")\n    : config.hydrateColumnNames;\n\n// Parse the supplied format options, or default to config\nconst parseFormatOptions = (config, args) =>\n  typeof args[0].formatOptions === \"object\"\n    ? {\n        deserializeDate:\n          typeof args[0].formatOptions.deserializeDate === \"boolean\"\n            ? args[0].formatOptions.deserializeDate\n            : args[0].formatOptions.deserializeDate\n            ? error(\"'formatOptions.deserializeDate' must be a boolean.\")\n            : config.formatOptions.deserializeDate,\n        treatAsLocalDate:\n          typeof args[0].formatOptions.treatAsLocalDate == \"boolean\"\n            ? args[0].formatOptions.treatAsLocalDate\n            : args[0].formatOptions.treatAsLocalDate\n            ? error(\"'formatOptions.treatAsLocalDate' must be a boolean.\")\n            : config.formatOptions.treatAsLocalDate,\n      }\n    : args[0].formatOptions\n    ? error(\"'formatOptions' must be an object.\")\n    : config.formatOptions;\n\n// Prepare method params w/ supplied inputs if an object is passed\nconst prepareParams = ({ secretArn, resourceArn }, args) => {\n  return Object.assign(\n    { secretArn, resourceArn }, // return Arns\n    typeof args[0] === \"object\"\n      ? omit(args[0], [\"hydrateColumnNames\", \"parameters\"])\n      : {} // merge any inputs\n  );\n};\n\n// Utility function for removing certain keys from an object\nconst omit = (obj, values) =>\n  Object.keys(obj).reduce(\n    (acc, x) =>\n      values.includes(x) ? acc : Object.assign(acc, { [x]: obj[x] }),\n    {}\n  );\n\n// Utility function for picking certain keys from an object\nconst pick = (obj, values) =>\n  Object.keys(obj).reduce(\n    (acc, x) =>\n      values.includes(x) ? Object.assign(acc, { [x]: obj[x] }) : acc,\n    {}\n  );\n\n// Utility function for flattening arrays\nconst flatten = (arr) => arr.reduce((acc, x) => acc.concat(x), []);\n\n// Normize parameters so that they are all in standard format\nconst normalizeParams = (params) =>\n  params.reduce(\n    (acc, p) =>\n      Array.isArray(p)\n        ? acc.concat([normalizeParams(p)])\n        : (Object.keys(p).length === 2 && p.name && p.value) ||\n          (Object.keys(p).length === 3 && p.name && p.value && p.cast)\n        ? acc.concat(p)\n        : acc.concat(splitParams(p)),\n    []\n  ); // end reduce\n\n// Prepare parameters\nconst processParams = (\n  engine,\n  sql,\n  sqlParams,\n  params,\n  formatOptions,\n  row = 0\n) => {\n  return {\n    processedParams: params.reduce((acc, p) => {\n      if (Array.isArray(p)) {\n        const result = processParams(sql, sqlParams, p, formatOptions, row);\n        if (row === 0) {\n          sql = result.escapedSql;\n          row++;\n        }\n        return acc.concat([result.processedParams]);\n      } else if (sqlParams[p.name]) {\n        if (sqlParams[p.name].type === \"n_ph\") {\n          if (p.cast) {\n            const regex = new RegExp(\":\" + p.name + \"\\\\b\", \"g\");\n            sql = sql.replace(\n              regex,\n              engine === \"pg\"\n                ? `:${p.name}::${p.cast}`\n                : `CAST(:${p.name} AS ${p.cast})`\n            );\n          }\n          acc.push(formatParam(p.name, p.value, formatOptions));\n        } else if (row === 0) {\n          const regex = new RegExp(\"::\" + p.name + \"\\\\b\", \"g\");\n          sql = sql.replace(regex, sqlString.escapeId(p.value));\n        }\n        return acc;\n      } else {\n        return acc;\n      }\n    }, []),\n    escapedSql: sql,\n  };\n};\n\n// Converts parameter to the name/value format\nconst formatParam = (n, v, formatOptions) =>\n  formatType(n, v, getType(v), getTypeHint(v), formatOptions);\n\n// Converts object params into name/value format\nconst splitParams = (p) =>\n  Object.keys(p).reduce((arr, x) => arr.concat({ name: x, value: p[x] }), []);\n\n// Get all the sql parameters and assign them types\nconst getSqlParams = (sql) => {\n  // TODO: probably need to remove comments from the sql\n  // TODO: placeholders?\n  // sql.match(/\\:{1,2}\\w+|\\?+/g).map((p,i) => {\n  return (sql.match(/:{1,2}\\w+/g) || [])\n    .map((p) => {\n      // TODO: future support for placeholder parsing?\n      // return p === '??' ? { type: 'id' } // identifier\n      //   : p === '?' ? { type: 'ph', label: '__d'+i  } // placeholder\n      return p.startsWith(\"::\")\n        ? { type: \"n_id\", label: p.substr(2) } // named id\n        : { type: \"n_ph\", label: p.substr(1) }; // named placeholder\n    })\n    .reduce((acc, x) => {\n      return Object.assign(acc, {\n        [x.label]: {\n          type: x.type,\n        },\n      });\n    }, {}); // end reduce\n};\n\n// Gets the value type and returns the correct value field name\n// TODO: Support more types as the are released\nconst getType = (val) =>\n  typeof val === \"string\"\n    ? \"stringValue\"\n    : typeof val === \"boolean\"\n    ? \"booleanValue\"\n    : typeof val === \"number\" && parseInt(val) === val\n    ? \"longValue\"\n    : typeof val === \"number\" && parseFloat(val) === val\n    ? \"doubleValue\"\n    : val === null\n    ? \"isNull\"\n    : isDate(val)\n    ? \"stringValue\"\n    : Buffer.isBuffer(val)\n    ? \"blobValue\"\n    : // : Array.isArray(val) ? 'arrayValue' This doesn't work yet\n    // TODO: there is a 'structValue' now for postgres\n    typeof val === \"object\" &&\n      Object.keys(val).length === 1 &&\n      supportedTypes.includes(Object.keys(val)[0])\n    ? null\n    : undefined;\n\n// Hint to specify the underlying object type for data type mapping\nconst getTypeHint = (val) => (isDate(val) ? \"TIMESTAMP\" : undefined);\n\nconst isDate = (val) => val instanceof Date;\n\n// Creates a standard Data API parameter using the supplied inputs\nconst formatType = (name, value, type, typeHint, formatOptions) => {\n  return Object.assign(\n    typeHint != null ? { name, typeHint } : { name },\n    type === null\n      ? { value }\n      : {\n          value: {\n            [type ? type : error(`'${name}' is an invalid type`)]:\n              type === \"isNull\"\n                ? true\n                : isDate(value)\n                ? formatToTimeStamp(\n                    value,\n                    formatOptions && formatOptions.treatAsLocalDate\n                  )\n                : value,\n          },\n        }\n  );\n}; // end formatType\n\n// Formats the (UTC) date to the AWS accepted YYYY-MM-DD HH:MM:SS[.FFF] format\n// See https://docs.aws.amazon.com/rdsdataservice/latest/APIReference/API_SqlParameter.html\nconst formatToTimeStamp = (date, treatAsLocalDate) => {\n  const pad = (val, num = 2) => \"0\".repeat(num - (val + \"\").length) + val;\n\n  const year = treatAsLocalDate ? date.getFullYear() : date.getUTCFullYear();\n  const month = (treatAsLocalDate ? date.getMonth() : date.getUTCMonth()) + 1; // Convert to human month\n  const day = treatAsLocalDate ? date.getDate() : date.getUTCDate();\n\n  const hours = treatAsLocalDate ? date.getHours() : date.getUTCHours();\n  const minutes = treatAsLocalDate ? date.getMinutes() : date.getUTCMinutes();\n  const seconds = treatAsLocalDate ? date.getSeconds() : date.getUTCSeconds();\n  const ms = treatAsLocalDate\n    ? date.getMilliseconds()\n    : date.getUTCMilliseconds();\n\n  const fraction = ms <= 0 ? \"\" : `.${pad(ms, 3)}`;\n\n  return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(\n    seconds\n  )}${fraction}`;\n};\n\n// Converts the string value to a Date object.\n// If standard TIMESTAMP format (YYYY-MM-DD[ HH:MM:SS[.FFF]]) without TZ + treatAsLocalDate=false then assume UTC Date\n// In all other cases convert value to datetime as-is (also values with TZ info)\nconst formatFromTimeStamp = (value, treatAsLocalDate) =>\n  !treatAsLocalDate &&\n  /^\\d{4}-\\d{2}-\\d{2}(\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?)?$/.test(value)\n    ? new Date(value + \"Z\")\n    : new Date(value);\n\n// Formats the results of a query response\nconst formatResults = (\n  {\n    // destructure results\n    columnMetadata, // ONLY when hydrate or includeResultMetadata is true\n    numberOfRecordsUpdated, // ONLY for executeStatement method\n    records, // ONLY for executeStatement method\n    generatedFields, // ONLY for INSERTS\n    updateResults, // ONLY on batchExecuteStatement\n  },\n  hydrate,\n  includeMeta,\n  formatOptions\n) =>\n  Object.assign(\n    includeMeta ? { columnMetadata } : {},\n    numberOfRecordsUpdated !== undefined && !records\n      ? { numberOfRecordsUpdated }\n      : {},\n    records\n      ? {\n          records: formatRecords(\n            records,\n            columnMetadata,\n            hydrate,\n            formatOptions\n          ),\n        }\n      : {},\n    updateResults ? { updateResults: formatUpdateResults(updateResults) } : {},\n    generatedFields && generatedFields.length > 0\n      ? { insertId: generatedFields[0].longValue }\n      : {}\n  );\n\n// Processes records and either extracts Typed Values into an array, or\n// object with named column labels\nconst formatRecords = (recs, columns, hydrate, formatOptions) => {\n  // Create map for efficient value parsing\n  let fmap =\n    recs && recs[0]\n      ? recs[0].map((x, i) => {\n          return Object.assign(\n            {},\n            columns\n              ? { label: columns[i].label, typeName: columns[i].typeName }\n              : {}\n          ); // add column label and typeName\n        })\n      : {};\n\n  // Map over all the records (rows)\n  return recs\n    ? recs.map((rec) => {\n        // Reduce each field in the record (row)\n        return rec.reduce(\n          (acc, field, i) => {\n            // If the field is null, always return null\n            if (field.isNull === true) {\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: null })\n                : acc.concat(null);\n\n              // If the field is mapped, return the mapped field\n            } else if (fmap[i] && fmap[i].field) {\n              const value = formatRecordValue(\n                field[fmap[i].field],\n                fmap[i].typeName,\n                formatOptions\n              );\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: value })\n                : acc.concat(value);\n\n              // Else discover the field type\n            } else {\n              // Look for non-null fields\n              Object.keys(field).map((type) => {\n                if (type !== \"isNull\" && field[type] !== null) {\n                  fmap[i][\"field\"] = type;\n                }\n              });\n\n              // Return the mapped field (this should NEVER be null)\n              const value = formatRecordValue(\n                field[fmap[i].field],\n                fmap[i].typeName,\n                formatOptions\n              );\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: value })\n                : acc.concat(value);\n            }\n          },\n          hydrate ? {} : []\n        ); // init object if hydrate, else init array\n      })\n    : []; // empty record set returns an array\n}; // end formatRecords\n\n// Format record value based on its value, the database column's typeName and the formatting options\nconst formatRecordValue = (value, typeName, formatOptions) =>\n  formatOptions &&\n  formatOptions.deserializeDate &&\n  [\"DATE\", \"DATETIME\", \"TIMESTAMP\", \"TIMESTAMP WITH TIME ZONE\"].includes(\n    typeName\n  )\n    ? formatFromTimeStamp(\n        value,\n        (formatOptions && formatOptions.treatAsLocalDate) ||\n          typeName === \"TIMESTAMP WITH TIME ZONE\"\n      )\n    : value;\n\n// Format updateResults and extract insertIds\nconst formatUpdateResults = (res) =>\n  res.map((x) => {\n    return x.generatedFields && x.generatedFields.length > 0\n      ? { insertId: x.generatedFields[0].longValue }\n      : {};\n  });\n\n// Merge configuration data with supplied arguments\nconst mergeConfig = (initialConfig, args) => Object.assign(initialConfig, args);\n\n/********************************************************************/\n/**  QUERY MANAGEMENT                                              **/\n/********************************************************************/\n\n// Query function (use standard form for `this` context)\nconst query = async function (config, ..._args) {\n  // Flatten array if nested arrays (fixes #30)\n  const args = Array.isArray(_args[0]) ? flatten(_args) : _args;\n\n  // Parse and process sql\n  const sql = parseSQL(args);\n  const sqlParams = getSqlParams(sql);\n\n  // Parse hydration setting\n  const hydrateColumnNames = parseHydrate(config, args);\n\n  // Parse data format settings\n  const formatOptions = parseFormatOptions(config, args);\n\n  // Parse and normalize parameters\n  const parameters = normalizeParams(parseParams(args));\n\n  // Process parameters and escape necessary SQL\n  const { processedParams, escapedSql } = processParams(\n    config.engine,\n    sql,\n    sqlParams,\n    parameters,\n    formatOptions\n  );\n\n  // Determine if this is a batch request\n  const isBatch =\n    processedParams.length > 0 && Array.isArray(processedParams[0]);\n\n  // Create/format the parameters\n  const params = Object.assign(\n    prepareParams(config, args),\n    {\n      database: parseDatabase(config, args), // add database\n      sql: escapedSql, // add escaped sql statement\n    },\n    // Only include parameters if they exist\n    processedParams.length > 0\n      ? // Batch statements require parameterSets instead of parameters\n        { [isBatch ? \"parameterSets\" : \"parameters\"]: processedParams }\n      : {},\n    // Force meta data if set and not a batch\n    hydrateColumnNames && !isBatch ? { includeResultMetadata: true } : {},\n    // If a transactionId is passed, overwrite any manual input\n    config.transactionId ? { transactionId: config.transactionId } : {}\n  ); // end params\n\n  try {\n    // attempt to run the query\n\n    // Capture the result for debugging\n    let result = await (isBatch\n      ? config.RDS.batchExecuteStatement(params).promise()\n      : config.RDS.executeStatement(params).promise());\n\n    // Format and return the results\n    return formatResults(\n      result,\n      hydrateColumnNames,\n      args[0].includeResultMetadata === true,\n      formatOptions\n    );\n  } catch (e) {\n    if (this && this.rollback) {\n      let rollback = await config.RDS.rollbackTransaction(\n        pick(params, [\"resourceArn\", \"secretArn\", \"transactionId\"])\n      ).promise();\n\n      this.rollback(e, rollback);\n    }\n    // Throw the error\n    throw e;\n  }\n}; // end query\n\n/********************************************************************/\n/**  TRANSACTION MANAGEMENT                                        **/\n/********************************************************************/\n\n// Init a transaction object and return methods\nconst transaction = (config, _args) => {\n  let args = typeof _args === \"object\" ? [_args] : [{}];\n  let queries = []; // keep track of queries\n  let rollback = () => {}; // default rollback event\n\n  const txConfig = Object.assign(prepareParams(config, args), {\n    database: parseDatabase(config, args), // add database\n    hydrateColumnNames: parseHydrate(config, args), // add hydrate\n    formatOptions: parseFormatOptions(config, args), // add formatOptions\n    RDS: config.RDS, // reference the RDSDataService instance\n  });\n\n  return {\n    query: function (...args) {\n      if (typeof args[0] === \"function\") {\n        queries.push(args[0]);\n      } else {\n        queries.push(() => [...args]);\n      }\n      return this;\n    },\n    rollback: function (fn) {\n      if (typeof fn === \"function\") {\n        rollback = fn;\n      }\n      return this;\n    },\n    commit: async function () {\n      return await commit(txConfig, queries, rollback);\n    },\n  };\n};\n\n// Commit transaction by running queries\nconst commit = async (config, queries, rollback) => {\n  let results = []; // keep track of results\n\n  // Start a transaction\n  const { transactionId } = await config.RDS.beginTransaction(\n    pick(config, [\"resourceArn\", \"secretArn\", \"database\"])\n  ).promise();\n\n  // Add transactionId to the config\n  let txConfig = Object.assign(config, { transactionId });\n\n  // Loop through queries\n  for (let i = 0; i < queries.length; i++) {\n    // Execute the queries, pass the rollback as context\n    let result = await query.apply({ rollback }, [\n      config,\n      queries[i](results[results.length - 1], results),\n    ]);\n    // Add the result to the main results accumulator\n    results.push(result);\n  }\n\n  // Commit our transaction\n  const { transactionStatus } = await txConfig.RDS.commitTransaction(\n    pick(config, [\"resourceArn\", \"secretArn\", \"transactionId\"])\n  ).promise();\n\n  // Add the transaction status to the results\n  results.push({ transactionStatus });\n\n  // Return the results\n  return results;\n};\n\n/********************************************************************/\n/**  INSTANTIATION                                                 **/\n/********************************************************************/\n\n// Export main function\n/**\n * Create a Data API client instance\n * @param {object} params\n * @param {'mysql'|'pg'} params.engine The type of database (MySQL or Postgres)\n * @param {string} params.resourceArn The ARN of your Aurora Serverless Cluster\n * @param {string} params.secretArn The ARN of the secret associated with your\n *   database credentials\n * @param {string} [params.database] The name of the database\n * @param {boolean} [params.hydrateColumnNames=true] Return objects with column\n *   names as keys\n * @param {object} [params.options={}] Configuration object passed directly\n *   into RDSDataService\n * @param {object} [params.formatOptions] Date-related formatting options\n * @param {boolean} [params.formatOptions.deserializeDate=false]\n * @param {boolean} [params.formatOptions.treatAsLocalDate=false]\n * @param {boolean} [params.keepAlive] DEPRECATED\n * @param {boolean} [params.sslEnabled=true] DEPRECATED\n * @param {string} [params.region] DEPRECATED\n *\n */\nconst init = (params) => {\n  // Set the options for the RDSDataService\n  const options =\n    typeof params.options === \"object\"\n      ? params.options\n      : params.options !== undefined\n      ? error(\"'options' must be an object\")\n      : {};\n\n  // Update the AWS http agent with the region\n  if (typeof params.region === \"string\") {\n    options.region = params.region;\n  }\n\n  // Disable ssl if wanted for local development\n  if (params.sslEnabled === false) {\n    options.sslEnabled = false;\n  }\n\n  // Set the configuration for this instance\n  const config = {\n    // Require engine\n    engine:\n      typeof params.engine === \"string\"\n        ? params.engine\n        : error(\"'engine' string value required\"),\n\n    // Require secretArn\n    secretArn:\n      typeof params.secretArn === \"string\"\n        ? params.secretArn\n        : error(\"'secretArn' string value required\"),\n\n    // Require resourceArn\n    resourceArn:\n      typeof params.resourceArn === \"string\"\n        ? params.resourceArn\n        : error(\"'resourceArn' string value required\"),\n\n    // Load optional database\n    database:\n      typeof params.database === \"string\"\n        ? params.database\n        : params.database !== undefined\n        ? error(\"'database' must be a string\")\n        : undefined,\n\n    // Load optional schema DISABLED for now since this isn't used with MySQL\n    // schema: typeof params.schema === 'string' ? params.schema\n    //   : params.schema !== undefined ? error(`'schema' must be a string`)\n    //   : undefined,\n\n    // Set hydrateColumnNames (default to true)\n    hydrateColumnNames:\n      typeof params.hydrateColumnNames === \"boolean\"\n        ? params.hydrateColumnNames\n        : true,\n\n    // Value formatting options. For date the deserialization is enabled and (re)stored as UTC\n    formatOptions: {\n      deserializeDate:\n        typeof params.formatOptions === \"object\" &&\n        params.formatOptions.deserializeDate === false\n          ? false\n          : true,\n      treatAsLocalDate:\n        typeof params.formatOptions === \"object\" &&\n        params.formatOptions.treatAsLocalDate,\n    },\n\n    // TODO: Put this in a separate module for testing?\n    // Create an instance of RDSDataService\n    RDS: new AWS.RDSDataService(options),\n  }; // end config\n\n  // Return public methods\n  return {\n    // Query method, pass config and parameters\n    query: (...x) => query(config, ...x),\n    // Transaction method, pass config and parameters\n    transaction: (x) => transaction(config, x),\n\n    // Export promisified versions of the RDSDataService methods\n    batchExecuteStatement: (args) =>\n      config.RDS.batchExecuteStatement(\n        mergeConfig(\n          pick(config, [\"resourceArn\", \"secretArn\", \"database\"]),\n          args\n        )\n      ).promise(),\n    beginTransaction: (args) =>\n      config.RDS.beginTransaction(\n        mergeConfig(\n          pick(config, [\"resourceArn\", \"secretArn\", \"database\"]),\n          args\n        )\n      ).promise(),\n    commitTransaction: (args) =>\n      config.RDS.commitTransaction(\n        mergeConfig(pick(config, [\"resourceArn\", \"secretArn\"]), args)\n      ).promise(),\n    executeStatement: (args) =>\n      config.RDS.executeStatement(\n        mergeConfig(\n          pick(config, [\"resourceArn\", \"secretArn\", \"database\"]),\n          args\n        )\n      ).promise(),\n    rollbackTransaction: (args) =>\n      config.RDS.rollbackTransaction(\n        mergeConfig(pick(config, [\"resourceArn\", \"secretArn\"]), args)\n      ).promise(),\n  };\n}; // end exports\n\nmodule.exports = init;\n","export interface QueryTransformationResult {\n  queryString: string,\n  parameters: any[],\n}\n\nexport abstract class QueryTransformer {\n  public transformQueryAndParameters(query: string, srcParameters: any[] = []) {\n    if (!srcParameters.length) {\n      return { queryString: query, parameters: [] }\n    }\n\n    const queryString = this.transformQuery(query, srcParameters)\n    const parameters = this.transformParameters(srcParameters)\n    return { queryString, parameters }\n  }\n\n  protected abstract transformQuery(query: string, srcParameters: any[]): string\n\n  protected abstract transformParameters(srcParameters?: any[]): any[] | undefined\n}\n","import { QueryTransformer } from './query-transformer'\n\nexport class MysqlQueryTransformer extends QueryTransformer {\n  protected transformQuery(query: string, parameters: any[]): string {\n    const quoteCharacters = [\"'\", '\"']\n    let newQueryString = ''\n    let currentQuote = null\n    let srcIndex = 0\n    let destIndex = 0\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i]\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === '\\\\'\n\n      if (currentCharacter === '?' && !currentQuote) {\n        const parameter = parameters![srcIndex]\n\n        if (Array.isArray(parameter)) {\n          const additionalParameters = parameter.map((_, index) =>\n            `:param_${destIndex + index}`)\n\n          newQueryString += additionalParameters.join(', ')\n          destIndex += additionalParameters.length\n        } else {\n          newQueryString += `:param_${destIndex}`\n          destIndex += 1\n        }\n        srcIndex += 1\n      } else {\n        newQueryString += currentCharacter\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null\n          }\n        }\n      }\n    }\n\n    return newQueryString\n  }\n\n  protected expandArrayParameters(parameters: any[]): any[] {\n    return parameters.reduce(\n      (expandedParameters, parameter) => {\n        if (Array.isArray(parameter)) {\n          expandedParameters.push(...parameter)\n        } else {\n          expandedParameters.push(parameter)\n        }\n        return expandedParameters\n      }, [])\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters\n    }\n\n    const expandedParameters = this.expandArrayParameters(parameters)\n\n    return [expandedParameters.reduce(\n      (params, parameter, index) => {\n        params[`param_${index}`] = parameter\n        return params\n      }, {})]\n  }\n}\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import { QueryTransformer } from \"./query-transformer\";\nimport { validate } from \"uuid\";\n\nexport class PostgresQueryTransformer extends QueryTransformer {\n  protected transformQuery(query: string) {\n    const quoteCharacters = [\"'\", '\"'];\n    let newQueryString = \"\";\n    let currentQuote = null;\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i];\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === \"\\\\\";\n\n      if (currentCharacter === \"$\" && !currentQuote) {\n        newQueryString += \":param_\";\n      } else {\n        newQueryString += currentCharacter;\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter;\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null;\n          }\n        }\n      }\n    }\n\n    return newQueryString;\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters;\n    }\n\n    return parameters.map((parameter, index) => {\n      const paramName = `param_${index + 1}`;\n\n      if (Array.isArray(parameter)) {\n        const arrayValue: { stringValues?: Array<string> } = {};\n        switch (typeof parameter[0]) {\n          case \"string\": {\n            arrayValue.stringValues = parameter;\n          }\n          default: {\n            throw new Error(`Array parameter type \"${typeof parameter[0]}\" not supported`);\n          }\n        }\n        return {\n          name: paramName,\n          value: { arrayValue },\n        };\n      } else if (validate(parameter)) {\n        return {\n          name: paramName,\n          value: parameter,\n          cast: \"uuid\",\n        };\n      }\n\n      return { [paramName]: parameter };\n    });\n  }\n}\n","// @ts-ignore\nimport createDataApiClient from 'data-api-client'\nimport { MysqlQueryTransformer, PostgresQueryTransformer, QueryTransformer } from './query-transformer'\n\nclass DataApiDriver {\n  private readonly client: any\n  private transactionId?: string\n\n  constructor(\n    private readonly region: string,\n    private readonly secretArn: string,\n    private readonly resourceArn: string,\n    private readonly database: string,\n    private readonly loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n    private readonly queryTransformer: QueryTransformer,\n    private readonly serviceConfigOptions?: any,\n    private readonly formatOptions?: any,\n  ) {\n    this.region = region\n    this.secretArn = secretArn\n    this.resourceArn = resourceArn\n    this.database = database\n    this.loggerFn = loggerFn\n    this.serviceConfigOptions = serviceConfigOptions || {}\n    this.serviceConfigOptions.region = region\n    this.client = createDataApiClient({\n      secretArn,\n      resourceArn,\n      database,\n      engine: serviceConfigOptions.engine,\n      options: this.serviceConfigOptions,\n      formatOptions,\n    })\n    this.queryTransformer = queryTransformer\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<any> {\n    const transformedQueryData = this.queryTransformer.transformQueryAndParameters(query, parameters)\n\n    this.loggerFn(transformedQueryData.queryString, transformedQueryData.parameters)\n\n    const result = await this.client.query({\n      sql: transformedQueryData.queryString,\n      parameters: transformedQueryData.parameters,\n      transactionId: this.transactionId,\n    })\n\n    return result.records || result\n  }\n\n  public async startTransaction(): Promise<void> {\n    const { transactionId } = await this.client.beginTransaction()\n    this.transactionId = transactionId\n  }\n\n  public async commitTransaction(): Promise<void> {\n    await this.client.commitTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n\n  public async rollbackTransaction(): Promise<void> {\n    await this.client.rollbackTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n}\n\nconst createMysqlDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n                           loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n                           serviceConfigOptions?: any, formatOptions?: any) => {\n\n  return new DataApiDriver(\n    region,\n    secretArn,\n    resourceArn,\n    database,\n    loggerFn,\n    new MysqlQueryTransformer(),\n    serviceConfigOptions,\n    formatOptions,\n  )\n}\n\nexport default createMysqlDriver\n\nconst createPostgresDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n                              loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n                              serviceConfigOptions?: any, formatOptions?: any) => {\n  return new DataApiDriver(\n    region,\n    secretArn,\n    resourceArn,\n    database,\n    loggerFn,\n    new PostgresQueryTransformer(),\n    serviceConfigOptions,\n    formatOptions,\n  )\n}\n\nexport const pg = createPostgresDriver\n"],"names":["require$$0","sqlString","AWS","createDataApiClient"],"mappings":"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"}