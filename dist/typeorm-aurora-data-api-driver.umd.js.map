{"version":3,"file":"typeorm-aurora-data-api-driver.umd.js","sources":["../node_modules/sqlstring/lib/SqlString.js","../node_modules/sqlstring/index.js","../node_modules/data-api-client/index.js","../src/utils/transform.utils.ts","../src/query-transformer/query-transformer.ts","../src/query-transformer/mysql-query-transformer.ts","../src/query-transformer/postgres-query-transformer.ts","../src/typeorm-aurora-data-api-driver.ts"],"sourcesContent":["var SqlString  = exports;\n\nvar ID_GLOBAL_REGEXP    = /`/g;\nvar QUAL_GLOBAL_REGEXP  = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP    = {\n  '\\0'   : '\\\\0',\n  '\\b'   : '\\\\b',\n  '\\t'   : '\\\\t',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\x1a' : '\\\\Z',\n  '\"'    : '\\\\\"',\n  '\\''   : '\\\\\\'',\n  '\\\\'   : '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val + '';\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n    default: return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!Array.isArray(values)) {\n    values = [values];\n  }\n\n  var chunkIndex        = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result            = '';\n  var valuesIndex       = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2\n      ? SqlString.escapeId(values[valuesIndex])\n      : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year        = dt.getFullYear();\n    month       = dt.getMonth() + 1;\n    day         = dt.getDate();\n    hour        = dt.getHours();\n    minute      = dt.getMinutes();\n    second      = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + (tz * 60000));\n    }\n\n    year       = dt.getUTCFullYear();\n    month       = dt.getUTCMonth() + 1;\n    day         = dt.getUTCDate();\n    hour        = dt.getUTCHours();\n    minute      = dt.getUTCMinutes();\n    second      = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n    zeroPad(millisecond, 3);\n\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() { return sql; }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n  }\n  return false;\n}\n","module.exports = require('./lib/SqlString');\n","'use strict'\n\n/*\n * This module provides a simplified interface into the Aurora Serverless\n * Data API by abstracting away the notion of field values.\n *\n * More detail regarding the Aurora Serverless Data APIcan be found here:\n * https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\n *\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @version 1.2.0\n * @license MIT\n */\n\n// Require the aws-sdk. This is a dev dependency, so if being used\n// outside of a Lambda execution environment, it must be manually installed.\nconst AWS = require('aws-sdk')\n\n// Require sqlstring to add additional escaping capabilities\nconst sqlString = require('sqlstring')\n\n// Supported value types in the Data API\nconst supportedTypes = [\n  'arrayValue',\n  'blobValue',\n  'booleanValue',\n  'doubleValue',\n  'isNull',\n  'longValue',\n  'stringValue',\n  'structValue'\n]\n\n/********************************************************************/\n/**  PRIVATE METHODS                                               **/\n/********************************************************************/\n\n// Simple error function\nconst error = (...err) => { throw Error(...err) }\n\n// Parse SQL statement from provided arguments\nconst parseSQL = args =>\n  typeof args[0] === 'string' ? args[0]\n  : typeof args[0] === 'object' && typeof args[0].sql === 'string' ? args[0].sql\n  : error('No \\'sql\\' statement provided.')\n\n// Parse the parameters from provided arguments\nconst parseParams = args =>\n  Array.isArray(args[0].parameters) ? args[0].parameters\n  : typeof args[0].parameters === 'object' ? [args[0].parameters]\n  : Array.isArray(args[1]) ? args[1]\n  : typeof args[1] === 'object' ? [args[1]]\n  : args[0].parameters ? error('\\'parameters\\' must be an object or array')\n  : args[1] ? error('Parameters must be an object or array')\n  : []\n\n// Parse the supplied database, or default to config\nconst parseDatabase = (config,args) =>\n  config.transactionId ? config.database\n  : typeof args[0].database === 'string' ? args[0].database\n  : args[0].database ? error('\\'database\\' must be a string.')\n  : config.database ? config.database\n  : undefined // removed for #47 - error('No \\'database\\' provided.')\n\n// Parse the supplied hydrateColumnNames command, or default to config\nconst parseHydrate = (config,args) =>\n  typeof args[0].hydrateColumnNames === 'boolean' ? args[0].hydrateColumnNames\n  : args[0].hydrateColumnNames ? error('\\'hydrateColumnNames\\' must be a boolean.')\n  : config.hydrateColumnNames\n\n// Parse the supplied format options, or default to config\nconst parseFormatOptions = (config,args) =>\n  typeof args[0].formatOptions === 'object' ? {\n    deserializeDate: typeof args[0].formatOptions.deserializeDate === 'boolean' ? args[0].formatOptions.deserializeDate\n    : args[0].formatOptions.deserializeDate ? error('\\'formatOptions.deserializeDate\\' must be a boolean.')\n    : config.formatOptions.deserializeDate,\n    treatAsLocalDate: typeof args[0].formatOptions.treatAsLocalDate == 'boolean' ? args[0].formatOptions.treatAsLocalDate\n    : args[0].formatOptions.treatAsLocalDate ? error('\\'formatOptions.treatAsLocalDate\\' must be a boolean.')\n    : config.formatOptions.treatAsLocalDate\n  }\n  : args[0].formatOptions ? error('\\'formatOptions\\' must be an object.')\n  : config.formatOptions\n\n// Prepare method params w/ supplied inputs if an object is passed\nconst prepareParams = ({ secretArn,resourceArn },args) => {\n  return Object.assign(\n    { secretArn,resourceArn }, // return Arns\n    typeof args[0] === 'object' ?\n      omit(args[0],['hydrateColumnNames','parameters']) : {} // merge any inputs\n  )\n}\n\n// Utility function for removing certain keys from an object\nconst omit = (obj,values) => Object.keys(obj).reduce((acc,x) =>\n  values.includes(x) ? acc : Object.assign(acc,{ [x]: obj[x] })\n,{})\n\n// Utility function for picking certain keys from an object\nconst pick = (obj,values) => Object.keys(obj).reduce((acc,x) =>\n  values.includes(x) ? Object.assign(acc,{ [x]: obj[x] }) : acc\n,{})\n\n// Utility function for flattening arrays\nconst flatten = arr => arr.reduce((acc,x) => acc.concat(x),[])\n\n// Normize parameters so that they are all in standard format\nconst normalizeParams = params => params.reduce((acc, p) =>\n  Array.isArray(p) ? acc.concat([normalizeParams(p)])\n  : (\n    (Object.keys(p).length === 2 && p.name && p.value !== 'undefined') ||\n    (Object.keys(p).length === 3 && p.name && p.value !== 'undefined' && p.cast)\n  ) ? acc.concat(p)\n    : acc.concat(splitParams(p))\n, []) // end reduce\n\n// Prepare parameters\nconst processParams = (engine,sql,sqlParams,params,formatOptions,row=0) => {\n  return {\n    processedParams: params.reduce((acc,p) => {\n      if (Array.isArray(p)) {\n        const result = processParams(engine,sql,sqlParams,p,formatOptions,row)\n        if (row === 0) { sql = result.escapedSql; row++ }\n        return acc.concat([result.processedParams])\n      } else if (sqlParams[p.name]) {\n        if (sqlParams[p.name].type === 'n_ph') {\n          if (p.cast) {\n            const regex = new RegExp(':' + p.name + '\\\\b', 'g')\n            sql = sql.replace(\n              regex,\n              engine === 'pg'\n                ? `:${p.name}::${p.cast}`\n                : `CAST(:${p.name} AS ${p.cast})`\n            )\n          }\n          acc.push(formatParam(p.name,p.value,formatOptions))\n        } else if (row === 0) {\n          const regex = new RegExp('::' + p.name + '\\\\b', 'g')\n          sql = sql.replace(regex, sqlString.escapeId(p.value))\n        }\n        return acc\n      } else {\n        return acc\n      }\n    },[]),\n    escapedSql: sql\n  }\n}\n\n// Converts parameter to the name/value format\nconst formatParam = (n,v,formatOptions) => formatType(n,v,getType(v),getTypeHint(v),formatOptions)\n\n// Converts object params into name/value format\nconst splitParams = p => Object.keys(p).reduce((arr,x) =>\n  arr.concat({ name: x, value: p[x] }),[])\n\n// Get all the sql parameters and assign them types\nconst getSqlParams = sql => {\n  // TODO: probably need to remove comments from the sql\n  // TODO: placeholders?\n  // sql.match(/\\:{1,2}\\w+|\\?+/g).map((p,i) => {\n  return (sql.match(/:{1,2}\\w+/g) || []).map((p) => {\n    // TODO: future support for placeholder parsing?\n    // return p === '??' ? { type: 'id' } // identifier\n    //   : p === '?' ? { type: 'ph', label: '__d'+i  } // placeholder\n    return p.startsWith('::') ? { type: 'n_id', label: p.substr(2) } // named id\n      : { type: 'n_ph', label: p.substr(1) } // named placeholder\n  }).reduce((acc,x) => {\n    return Object.assign(acc,\n      {\n        [x.label]: {\n          type: x.type\n        }\n      }\n    )\n  },{}) // end reduce\n}\n\n// Gets the value type and returns the correct value field name\n// TODO: Support more types as the are released\nconst getType = val =>\n  typeof val === 'string' ? 'stringValue'\n  : typeof val === 'boolean' ? 'booleanValue'\n  : typeof val === 'number' && parseInt(val) === val ? 'longValue'\n  : typeof val === 'number' && parseFloat(val) === val ? 'doubleValue'\n  : val === null ? 'isNull'\n  : isDate(val) ? 'stringValue'\n  : Buffer.isBuffer(val) ? 'blobValue'\n  // : Array.isArray(val) ? 'arrayValue' This doesn't work yet\n  // TODO: there is a 'structValue' now for postgres\n  : typeof val === 'object'\n    && Object.keys(val).length === 1\n    && supportedTypes.includes(Object.keys(val)[0]) ? null\n  : undefined\n\n// Hint to specify the underlying object type for data type mapping\nconst getTypeHint = val =>\n  isDate(val) ? 'TIMESTAMP' : undefined\n\nconst isDate = val =>\n  val instanceof Date\n\n// Creates a standard Data API parameter using the supplied inputs\nconst formatType = (name,value,type,typeHint,formatOptions) => {\n  return Object.assign(\n    typeHint != null ? { name, typeHint } : { name },\n    type === null ? { value }\n    : {\n      value: {\n        [type ? type : error(`'${name}' is an invalid type`)]\n        : type === 'isNull' ? true\n        : isDate(value) ? formatToTimeStamp(value, formatOptions && formatOptions.treatAsLocalDate)\n        : value\n      }\n    }\n  )\n} // end formatType\n\n// Formats the (UTC) date to the AWS accepted YYYY-MM-DD HH:MM:SS[.FFF] format\n// See https://docs.aws.amazon.com/rdsdataservice/latest/APIReference/API_SqlParameter.html\nconst formatToTimeStamp = (date, treatAsLocalDate) => {\n  const pad = (val,num=2) => '0'.repeat(num-(val + '').length) + val\n\n  const year = treatAsLocalDate ? date.getFullYear() : date.getUTCFullYear()\n  const month = (treatAsLocalDate ? date.getMonth() : date.getUTCMonth()) + 1 // Convert to human month\n  const day = treatAsLocalDate ? date.getDate() : date.getUTCDate()\n\n  const hours = treatAsLocalDate ? date.getHours() : date.getUTCHours()\n  const minutes = treatAsLocalDate ? date.getMinutes() : date.getUTCMinutes()\n  const seconds = treatAsLocalDate ? date.getSeconds() : date.getUTCSeconds()\n  const ms = treatAsLocalDate ? date.getMilliseconds() : date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms,3)}`\n\n  return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\n// Converts the string value to a Date object.\n// If standard TIMESTAMP format (YYYY-MM-DD[ HH:MM:SS[.FFF]]) without TZ + treatAsLocalDate=false then assume UTC Date\n// In all other cases convert value to datetime as-is (also values with TZ info)\nconst formatFromTimeStamp = (value,treatAsLocalDate) =>\n  !treatAsLocalDate && /^\\d{4}-\\d{2}-\\d{2}(\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?)?$/.test(value) ?\n    new Date(value + 'Z') :\n    new Date(value)\n\n// Formats the results of a query response\nconst formatResults = (\n  { // destructure results\n    columnMetadata, // ONLY when hydrate or includeResultMetadata is true\n    numberOfRecordsUpdated, // ONLY for executeStatement method\n    records, // ONLY for executeStatement method\n    generatedFields, // ONLY for INSERTS\n    updateResults // ONLY on batchExecuteStatement\n  },\n  hydrate,\n  includeMeta,\n  formatOptions\n) => Object.assign(\n  includeMeta ? { columnMetadata } : {},\n  numberOfRecordsUpdated !== undefined && !records ? { numberOfRecordsUpdated } : {},\n  records ? {\n    records: formatRecords(records, columnMetadata, hydrate, formatOptions)\n  } : {},\n  updateResults ? { updateResults: formatUpdateResults(updateResults) } : {},\n  generatedFields && generatedFields.length > 0 ?\n    { insertId: generatedFields[0].longValue } : {}\n)\n\n// Processes records and either extracts Typed Values into an array, or\n// object with named column labels\nconst formatRecords = (recs,columns,hydrate,formatOptions) => {\n\n  // Create map for efficient value parsing\n  let fmap = recs && recs[0] ? recs[0].map((x,i) => {\n    return Object.assign({},\n      columns ? { label: columns[i].label, typeName: columns[i].typeName } : {} ) // add column label and typeName\n  }) : {}\n\n  // Map over all the records (rows)\n  return recs ? recs.map(rec => {\n\n    // Reduce each field in the record (row)\n    return rec.reduce((acc,field,i) => {\n\n      // If the field is null, always return null\n      if (field.isNull === true) {\n        return hydrate ? // object if hydrate, else array\n          Object.assign(acc,{ [fmap[i].label]: null })\n          : acc.concat(null)\n\n      // If the field is mapped, return the mapped field\n      } else if (fmap[i] && fmap[i].field) {\n        const value = formatRecordValue(field[fmap[i].field],fmap[i].typeName,formatOptions)\n        return hydrate ? // object if hydrate, else array\n          Object.assign(acc,{ [fmap[i].label]: value })\n          : acc.concat(value)\n\n      // Else discover the field type\n      } else {\n\n        // Look for non-null fields\n        Object.keys(field).map(type => {\n          if (type !== 'isNull' && field[type] !== null) {\n            fmap[i]['field'] = type\n          }\n        })\n\n        // Return the mapped field (this should NEVER be null)\n        const value = formatRecordValue(field[fmap[i].field],fmap[i].typeName,formatOptions)\n        return hydrate ? // object if hydrate, else array\n          Object.assign(acc,{ [fmap[i].label]: value })\n          : acc.concat(value)\n      }\n\n    }, hydrate ? {} : []) // init object if hydrate, else init array\n  }) : [] // empty record set returns an array\n} // end formatRecords\n\n// Format record value based on its value, the database column's typeName and the formatting options\nconst formatRecordValue = (value,typeName,formatOptions) => formatOptions && formatOptions.deserializeDate &&\n  ['DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'].includes(typeName)\n  ? formatFromTimeStamp(value,(formatOptions && formatOptions.treatAsLocalDate) || typeName === 'TIMESTAMP WITH TIME ZONE')\n  : value\n\n// Format updateResults and extract insertIds\nconst formatUpdateResults = res => res.map(x => {\n  return x.generatedFields && x.generatedFields.length > 0 ?\n    { insertId: x.generatedFields[0].longValue } : {}\n})\n\n\n// Merge configuration data with supplied arguments\nconst mergeConfig = (initialConfig,args) =>\n  Object.assign(initialConfig,args)\n\n\n\n/********************************************************************/\n/**  QUERY MANAGEMENT                                              **/\n/********************************************************************/\n\n// Query function (use standard form for `this` context)\nconst query = async function(config,..._args) {\n  // Flatten array if nested arrays (fixes #30)\n  const args = Array.isArray(_args[0]) ? flatten(_args) : _args\n\n  // Parse and process sql\n  const sql = parseSQL(args)\n  const sqlParams = getSqlParams(sql)\n\n  // Parse hydration setting\n  const hydrateColumnNames = parseHydrate(config,args)\n\n  // Parse data format settings\n  const formatOptions = parseFormatOptions(config,args)\n\n  // Parse and normalize parameters\n  const parameters = normalizeParams(parseParams(args))\n\n  // Process parameters and escape necessary SQL\n  const { processedParams,escapedSql } = processParams(config.engine,sql,sqlParams,parameters,formatOptions)\n\n  // Determine if this is a batch request\n  const isBatch = processedParams.length > 0\n    && Array.isArray(processedParams[0])\n\n  // Create/format the parameters\n  const params = Object.assign(\n    prepareParams(config,args),\n    {\n      database: parseDatabase(config,args), // add database\n      sql: escapedSql // add escaped sql statement\n    },\n    // Only include parameters if they exist\n    processedParams.length > 0 ?\n      // Batch statements require parameterSets instead of parameters\n      { [isBatch ? 'parameterSets' : 'parameters']: processedParams } : {},\n    // Force meta data if set and not a batch\n    hydrateColumnNames && !isBatch ? { includeResultMetadata: true } : {},\n    // If a transactionId is passed, overwrite any manual input\n    config.transactionId ? { transactionId: config.transactionId } : {}\n  ) // end params\n\n  try { // attempt to run the query  \n\n    // Capture the result for debugging\n    let result = await (isBatch ? config.RDS.batchExecuteStatement(params).promise()\n      : config.RDS.executeStatement(params).promise())\n\n    // Format and return the results\n    return formatResults(\n      result,\n      hydrateColumnNames,\n      args[0].includeResultMetadata === true,\n      formatOptions\n    )\n\n  } catch(e) {\n\n    if (this && this.rollback) {\n      let rollback = await config.RDS.rollbackTransaction(\n        pick(params,['resourceArn','secretArn','transactionId'])\n      ).promise()\n\n      this.rollback(e,rollback)\n    }\n    // Throw the error\n    throw e\n  }\n\n} // end query\n\n\n\n/********************************************************************/\n/**  TRANSACTION MANAGEMENT                                        **/\n/********************************************************************/\n\n// Init a transaction object and return methods\nconst transaction = (config,_args) => {\n\n  let args = typeof _args === 'object' ? [_args] : [{}]\n  let queries = [] // keep track of queries\n  let rollback = () => {} // default rollback event\n\n  const txConfig = Object.assign(\n    prepareParams(config,args),\n    {\n      database: parseDatabase(config,args), // add database\n      hydrateColumnNames: parseHydrate(config,args), // add hydrate\n      formatOptions: parseFormatOptions(config,args), // add formatOptions\n      RDS: config.RDS // reference the RDSDataService instance\n    }\n  )\n\n  return {\n    query: function(...args) {\n      if (typeof args[0] === 'function') {\n        queries.push(args[0])\n      } else {\n        queries.push(() => [...args])\n      }\n      return this\n    },\n    rollback: function(fn) {\n      if (typeof fn === 'function') { rollback = fn }\n      return this\n    },\n    commit: async function() { return await commit(txConfig,queries,rollback) }\n  }\n}\n\n// Commit transaction by running queries\nconst commit = async (config,queries,rollback) => {\n\n  let results = [] // keep track of results\n\n  // Start a transaction\n  const { transactionId } = await config.RDS.beginTransaction(\n    pick(config,['resourceArn','secretArn','database'])\n  ).promise()\n\n  // Add transactionId to the config\n  let txConfig = Object.assign(config, { transactionId })\n\n  // Loop through queries\n  for (let i = 0; i < queries.length; i++) {\n    // Execute the queries, pass the rollback as context\n    let result = await query.apply({rollback},[config,queries[i](results[results.length-1],results)])\n    // Add the result to the main results accumulator\n    results.push(result)\n  }\n\n  // Commit our transaction\n  const { transactionStatus } = await txConfig.RDS.commitTransaction(\n    pick(config,['resourceArn','secretArn','transactionId'])\n  ).promise()\n\n  // Add the transaction status to the results\n  results.push({transactionStatus})\n\n  // Return the results\n  return results\n}\n\n/********************************************************************/\n/**  INSTANTIATION                                                 **/\n/********************************************************************/\n\n// Export main function\n/**\n * Create a Data API client instance\n * @param {object} params\n * @param {'mysql'|'pg'} [params.engine=mysql] The type of database (MySQL or Postgres)\n * @param {string} params.resourceArn The ARN of your Aurora Serverless Cluster\n * @param {string} params.secretArn The ARN of the secret associated with your\n *   database credentials\n * @param {string} [params.database] The name of the database\n * @param {boolean} [params.hydrateColumnNames=true] Return objects with column\n *   names as keys\n * @param {object} [params.options={}] Configuration object passed directly\n *   into RDSDataService\n * @param {object} [params.formatOptions] Date-related formatting options\n * @param {boolean} [params.formatOptions.deserializeDate=false]\n * @param {boolean} [params.formatOptions.treatAsLocalDate=false]\n * @param {boolean} [params.keepAlive] DEPRECATED\n * @param {boolean} [params.sslEnabled=true] DEPRECATED\n * @param {string} [params.region] DEPRECATED\n *\n */\nconst init = params => {\n\n  // Set the options for the RDSDataService\n  const options = typeof params.options === 'object' ? params.options\n    : params.options !== undefined ? error('\\'options\\' must be an object')\n    : {}\n\n  // Update the AWS http agent with the region\n  if (typeof params.region === 'string') {\n    options.region = params.region\n  }\n\n  // Disable ssl if wanted for local development\n  if (params.sslEnabled === false) {\n    options.sslEnabled = false\n  }\n\n  // Set the configuration for this instance\n  const config = {\n    // Require engine\n    engine: typeof params.engine === 'string' ?\n      params.engine\n      : 'mysql',\n\n    // Require secretArn\n    secretArn: typeof params.secretArn === 'string' ?\n      params.secretArn\n      : error('\\'secretArn\\' string value required'),\n\n    // Require resourceArn\n    resourceArn: typeof params.resourceArn === 'string' ?\n      params.resourceArn\n      : error('\\'resourceArn\\' string value required'),\n\n    // Load optional database\n    database: typeof params.database === 'string' ?\n      params.database\n      : params.database !== undefined ? error('\\'database\\' must be a string')\n      : undefined,\n\n    // Load optional schema DISABLED for now since this isn't used with MySQL\n    // schema: typeof params.schema === 'string' ? params.schema\n    //   : params.schema !== undefined ? error(`'schema' must be a string`)\n    //   : undefined,\n\n    // Set hydrateColumnNames (default to true)\n    hydrateColumnNames:\n      typeof params.hydrateColumnNames === 'boolean' ?\n        params.hydrateColumnNames : true,\n\n    // Value formatting options. For date the deserialization is enabled and (re)stored as UTC\n    formatOptions: {\n      deserializeDate:\n        typeof params.formatOptions === 'object' && params.formatOptions.deserializeDate === false ? false : true,\n      treatAsLocalDate:\n        typeof params.formatOptions === 'object' && params.formatOptions.treatAsLocalDate\n    },\n\n    // TODO: Put this in a separate module for testing?\n    // Create an instance of RDSDataService\n    RDS: new AWS.RDSDataService(options)\n\n  } // end config\n\n  // Return public methods\n  return {\n    // Query method, pass config and parameters\n    query: (...x) => query(config,...x),\n    // Transaction method, pass config and parameters\n    transaction: (x) => transaction(config,x),\n\n    // Export promisified versions of the RDSDataService methods\n    batchExecuteStatement: (args) =>\n      config.RDS.batchExecuteStatement(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    beginTransaction: (args) =>\n      config.RDS.beginTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    commitTransaction: (args) =>\n      config.RDS.commitTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn']),args)\n      ).promise(),\n    executeStatement: (args) =>\n      config.RDS.executeStatement(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    rollbackTransaction: (args) =>\n      config.RDS.rollbackTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn']),args)\n      ).promise()\n  }\n\n} // end exports\n\nmodule.exports = init\n","const pad = (val: string | number, num = 2) => '0'.repeat(num - (val.toString()).length) + val\n\nexport const dateToDateTimeString = (date: Date) => {\n  const year = date.getUTCFullYear()\n  const month = date.getUTCMonth() + 1 // Convert to human month\n  const day = date.getUTCDate()\n\n  const hours = date.getUTCHours()\n  const minutes = date.getUTCMinutes()\n  const seconds = date.getUTCSeconds()\n  const ms = date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms, 3)}`\n\n  return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\nexport const dateToDateString = (date: Date | string) => {\n  if (typeof date === 'string') {\n    return date\n  }\n\n  const year = date.getUTCFullYear()\n  const month = date.getUTCMonth() + 1 // Convert to human month\n  const day = date.getUTCDate()\n\n  return `${year}-${pad(month)}-${pad(day)}`\n}\n\nexport const dateToTimeString = (date: Date | string) => {\n  if (typeof date === 'string') {\n    return date\n  }\n\n  const hours = date.getUTCHours()\n  const minutes = date.getUTCMinutes()\n  const seconds = date.getUTCSeconds()\n  const ms = date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms, 3)}`\n\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\nexport const simpleArrayToString = (value: any[]|any): string[]|any => {\n  if (Array.isArray(value)) {\n    return (value as any[])\n      .map((i) => String(i))\n      .join(',')\n  }\n\n  return value\n}\n\nexport const stringToSimpleArray = (value: string|any): any[] => {\n  if (value instanceof String || typeof value === 'string') {\n    if (value.length > 0) {\n      return value.split(',')\n    }\n    return []\n  }\n\n  return value\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\n\nexport interface QueryTransformationResult {\n  queryString: string\n  parameters: any[]\n}\n\nexport abstract class QueryTransformer {\n  public transformQueryAndParameters(query: string, srcParameters: any[] = []) {\n    if (!srcParameters.length) {\n      return { queryString: query, parameters: [] }\n    }\n\n    const queryString = this.transformQuery(query, srcParameters)\n    const parameters = this.transformParameters(srcParameters)\n    return { queryString, parameters }\n  }\n\n  public abstract preparePersistentValue(value: any, metadata: ColumnMetadata): any\n\n  public abstract prepareHydratedValue(value: any, metadata: ColumnMetadata): any\n\n  protected abstract transformQuery(query: string, srcParameters: any[]): string\n\n  protected abstract transformParameters(srcParameters?: any[]): any[] | undefined\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport {\n  dateToDateString,\n  dateToDateTimeString,\n  dateToTimeString,\n  simpleArrayToString,\n  stringToSimpleArray,\n} from '../utils/transform.utils'\nimport { QueryTransformer } from './query-transformer'\n\nexport class MysqlQueryTransformer extends QueryTransformer {\n  preparePersistentValue(value: any, metadata: ColumnMetadata): any {\n    if (!value) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case 'date':\n        return {\n          value: dateToDateString(value),\n          cast: 'DATE',\n        }\n      case 'time':\n        return {\n          value: dateToTimeString(value),\n          cast: 'TIME',\n        }\n      case 'timestamp':\n      case 'datetime':\n      case Date:\n        return {\n          value: dateToDateTimeString(value),\n          cast: 'DATETIME',\n        }\n      case 'decimal':\n      case 'numeric':\n        return {\n          value: '' + value,\n          cast: 'DECIMAL',\n        }\n      case 'set':\n      case 'simple-array':\n        return {\n          value: simpleArrayToString(value),\n        }\n      case 'json':\n      case 'simple-json':\n        return {\n          value: JSON.stringify(value),\n        }\n      case 'enum':\n      case 'simple-enum':\n        return {\n          value: '' + value,\n          cast: metadata.enumName || `${metadata.entityMetadata.tableName}_${metadata.databaseName.toLowerCase()}_enum`,\n        }\n      default:\n        return {\n          value,\n        }\n    }\n  }\n\n  prepareHydratedValue(value: any, metadata: ColumnMetadata): any {\n    if (value === null || value === undefined) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case Boolean:\n        return !!value\n      case 'datetime':\n      case Date:\n      case 'timestamp':\n      case 'timestamp with time zone':\n      case 'timestamp without time zone':\n        return typeof value === 'string' ? new Date(value + ' GMT+0') : value\n      case 'date':\n        return dateToDateString(value)\n      case 'year':\n        return typeof value === 'string' ? new Date(value).getUTCFullYear() : value.getUTCFullYear()\n      case 'time':\n        return value\n      case 'set':\n      case 'simple-array':\n        return typeof value === 'string' ? stringToSimpleArray(value) : value\n      case 'json':\n      case 'simple-json':\n        return typeof value === 'string' ? JSON.parse(value) : value\n      case 'enum':\n      case 'simple-enum':\n        if (metadata.enum && !Number.isNaN(value) && metadata.enum.indexOf(parseInt(value, 10)) >= 0) {\n          return parseInt(value, 10)\n        }\n        return value\n      default:\n        return value\n    }\n  }\n\n  protected transformQuery(query: string, parameters: any[]): string {\n    const quoteCharacters = [\"'\", '\"']\n    let newQueryString = ''\n    let currentQuote = null\n    let srcIndex = 0\n    let destIndex = 0\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i]\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === '\\\\'\n\n      if (currentCharacter === '?' && !currentQuote) {\n        const parameter = parameters![srcIndex]\n\n        if (Array.isArray(parameter)) {\n          // eslint-disable-next-line no-loop-func\n          const additionalParameters = parameter.map((_, index) => `:param_${destIndex + index}`)\n\n          newQueryString += additionalParameters.join(', ')\n          destIndex += additionalParameters.length\n        } else {\n          newQueryString += `:param_${destIndex}`\n          destIndex += 1\n        }\n        srcIndex += 1\n      } else {\n        newQueryString += currentCharacter\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null\n          }\n        }\n      }\n    }\n\n    return newQueryString\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters\n    }\n\n    const expandedParameters = this.expandArrayParameters(parameters)\n\n    return expandedParameters.map((parameter, index) => {\n      if (parameter === undefined) {\n        return parameter\n      }\n\n      if (typeof parameter === 'object' && parameter?.value) {\n        return ({\n          name: `param_${index}`,\n          ...parameter,\n        })\n      }\n\n      return {\n        name: `param_${index}`,\n        value: parameter,\n      }\n    })\n  }\n\n  protected expandArrayParameters(parameters: any[]): any[] {\n    return parameters.reduce(\n      (expandedParameters, parameter) => {\n        if (Array.isArray(parameter)) {\n          expandedParameters.push(...parameter)\n        } else {\n          expandedParameters.push(parameter)\n        }\n        return expandedParameters\n      }, [],\n    )\n  }\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport { dateToDateString, dateToTimeString, dateToDateTimeString, simpleArrayToString, stringToSimpleArray } from '../utils/transform.utils'\nimport { QueryTransformer } from './query-transformer'\n\nexport class PostgresQueryTransformer extends QueryTransformer {\n  public preparePersistentValue(value:any, metadata: ColumnMetadata): any {\n    if (!value) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case 'date':\n        return {\n          value: dateToDateString(value),\n          cast: 'DATE',\n        }\n      case 'time':\n        return {\n          value: dateToTimeString(value),\n          cast: 'TIME',\n        }\n      case 'time with time zone':\n        return {\n          value: dateToTimeString(value),\n          cast: 'time with time zone',\n        }\n      case 'timetz':\n        return {\n          value: dateToTimeString(value),\n          cast: 'timetz',\n        }\n      case 'interval':\n        return {\n          value,\n          cast: 'interval',\n        }\n      case 'timestamp':\n      case 'datetime':\n      case 'timestamp with time zone':\n      case 'timestamptz':\n        return {\n          value: dateToDateTimeString(value),\n          cast: 'TIMESTAMP',\n        }\n      case 'decimal':\n      case 'numeric':\n        return {\n          value: '' + value,\n          cast: 'DECIMAL',\n        }\n      case 'simple-array':\n        return {\n          value: simpleArrayToString(value),\n        }\n      case 'simple-json':\n      case 'json':\n      case 'jsonb':\n        return {\n          value: JSON.stringify(value),\n          cast: 'JSON',\n        }\n      case 'uuid':\n        return {\n          value: '' + value,\n          cast: 'UUID',\n        }\n      case 'simple-enum':\n      case 'enum':\n        return {\n          value: '' + value,\n          cast: metadata.enumName || `${metadata.entityMetadata.tableName}_${metadata.databaseName.toLowerCase()}_enum`,\n        }\n      default:\n        return {\n          value,\n        }\n    }\n  }\n\n  prepareHydratedValue(value: any, metadata: ColumnMetadata): any {\n    if (value === null || value === undefined) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case Boolean:\n        return !!value\n      case 'datetime':\n      case Date:\n      case 'timestamp':\n      case 'timestamp with time zone':\n      case 'timestamp without time zone':\n      case 'timestamptz':\n        return typeof value === 'string' ? new Date(value + ' GMT+0') : value\n      case 'date':\n        return value\n      case 'time':\n        return value\n      case 'hstore':\n        if (metadata.hstoreType === 'object') {\n          const unescapeString = (str: string) => str.replace(/\\\\./g, (m) => m[1])\n          const regexp = /\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"=>(?:(NULL)|\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")(?:,|$)/g\n          const object: any = {};\n          `${value}`.replace(regexp, (_, key, nullValue, stringValue) => {\n            object[unescapeString(key)] = nullValue ? null : unescapeString(stringValue)\n            return ''\n          })\n          return object\n        }\n        return value\n      case 'simple-array':\n        return typeof value === 'string' ? stringToSimpleArray(value) : value\n      case 'json':\n      case 'simple-json':\n      case 'jsonb':\n        return typeof value === 'string' ? JSON.parse(value) : value\n      case 'enum':\n      case 'simple-enum':\n        if (metadata.isArray) {\n          // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)\n          value = value !== '{}' ? (value as string).substr(1, (value as string).length - 2)\n            .split(',') : []\n          // convert to number if that exists in possible enum options\n          return value.map((val: string) => (!Number.isNaN(+val) && metadata.enum!.indexOf(parseInt(val, 10)) >= 0 ? parseInt(val, 10) : val))\n        }\n        // convert to number if that exists in poosible enum options\n        return !Number.isNaN(+value) && metadata.enum!.indexOf(parseInt(value, 10)) >= 0 ? parseInt(value, 10) : value\n\n      default:\n        return value\n    }\n  }\n\n  protected transformQuery(query: string) {\n    const quoteCharacters = [\"'\", '\"'];\n    let newQueryString = \"\";\n    let currentQuote = null;\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i];\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === \"\\\\\";\n\n      if (currentCharacter === \"$\" && !currentQuote) {\n        newQueryString += \":param_\";\n      } else {\n        newQueryString += currentCharacter;\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter;\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null;\n          }\n        }\n      }\n    }\n\n    return newQueryString;\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters;\n    }\n\n    return parameters.map((parameter, index) => {\n      if (parameter === undefined) {\n        return parameter\n      }\n\n      if (typeof parameter === 'object' && parameter?.value) {\n        return ({\n          name: `param_${index + 1}`,\n          ...parameter,\n        })\n      }\n\n      // Hack for UUID\n      if (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test('' + parameter)) {\n        return {\n          name: `param_${index + 1}`,\n          value: '' + parameter,\n          cast: 'uuid',\n        }\n      }\n\n      return {\n        name: `param_${index + 1}`,\n        value: parameter,\n      }\n    })\n  }\n}\n","// @ts-ignore\nimport createDataApiClient from 'data-api-client'\nimport { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport { MysqlQueryTransformer, PostgresQueryTransformer, QueryTransformer } from './query-transformer'\n\nclass DataApiDriver {\n  private readonly client: any\n\n  private transactionId?: string\n\n  constructor(\n    private readonly region: string,\n    private readonly secretArn: string,\n    private readonly resourceArn: string,\n    private readonly database: string,\n    private readonly loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n    private readonly queryTransformer: QueryTransformer,\n    private readonly serviceConfigOptions?: any,\n    private readonly formatOptions?: any,\n  ) {\n    this.region = region\n    this.secretArn = secretArn\n    this.resourceArn = resourceArn\n    this.database = database\n    this.loggerFn = loggerFn\n    this.serviceConfigOptions = serviceConfigOptions || {}\n    this.serviceConfigOptions.region = region\n    this.client = createDataApiClient({\n      secretArn,\n      resourceArn,\n      database,\n      engine: serviceConfigOptions.engine,\n      options: this.serviceConfigOptions,\n      formatOptions,\n    })\n    this.queryTransformer = queryTransformer\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<any> {\n    const transformedQueryData = this.queryTransformer.transformQueryAndParameters(query, parameters)\n\n    this.loggerFn(transformedQueryData.queryString, transformedQueryData.parameters)\n\n    const result = await this.client.query({\n      sql: transformedQueryData.queryString,\n      parameters: transformedQueryData.parameters,\n      transactionId: this.transactionId,\n    })\n\n    return result.records || result\n  }\n\n  public preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n    return this.queryTransformer.preparePersistentValue(value, columnMetadata)\n  }\n\n  public prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n    return this.queryTransformer.prepareHydratedValue(value, columnMetadata)\n  }\n\n  public async startTransaction(): Promise<void> {\n    const { transactionId } = await this.client.beginTransaction()\n    this.transactionId = transactionId\n  }\n\n  public async commitTransaction(): Promise<void> {\n    await this.client.commitTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n\n  public async rollbackTransaction(): Promise<void> {\n    await this.client.rollbackTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n}\n\nconst createMysqlDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n  loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n  serviceConfigOptions?: any, formatOptions?: any) => new DataApiDriver(\n  region,\n  secretArn,\n  resourceArn,\n  database,\n  loggerFn,\n  new MysqlQueryTransformer(),\n  serviceConfigOptions,\n  formatOptions,\n)\n\nexport default createMysqlDriver\n\nconst createPostgresDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n  loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n  serviceConfigOptions?: any, formatOptions?: any) => new DataApiDriver(\n  region,\n  secretArn,\n  resourceArn,\n  database,\n  loggerFn,\n  new PostgresQueryTransformer(),\n  serviceConfigOptions,\n  formatOptions,\n)\n\nexport const pg = createPostgresDriver\n\nexport { MysqlQueryTransformer, PostgresQueryTransformer }\n"],"names":["require$$0","sqlString","AWS","createDataApiClient"],"mappings":"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"}